{"version":3,"sources":["components/QuestionTitle/QuestionTitle.module.css","components/HorizontalDragAndDrop/HorizontalDragAndDrop.module.css","common/CheckMark/CheckMark.module.css","components/CheckQuestion/CheckQuestion.module.css","components/Popup/Popup.module.css","components/QuestionTitle/QuestionTitle.tsx","common/CheckMark/CheckMark.tsx","components/HorizontalDragAndDrop/HorizontalDragAndDrop.tsx","hooks/useTypedSelector.ts","store/action-creators/horizontal.ts","store/action-creators/index.ts","components/Popup/Popup.tsx","components/CheckQuestion/CheckQuestion.tsx","pages/Horizontal/Horizontal.tsx","hooks/useActions.ts"],"names":["module","exports","QuestionTitle","number","title","className","classes","questionBlock","questionNumber","questionTitle","CheckMark","correctClassName","doneIcon","HorizontalDragAndDrop","words","updatedArray","useState","updatedArrayOfWords","setUpdatedArrayOfWords","useEffect","lightBorder","correctAnswer","incorrectAnswer","length","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","droppableId","direction","provided","dragBlock","droppableProps","ref","innerRef","map","id","value","draggableId","draggableProps","dragHandleProps","dragItem","placeholder","useTypedSelector","useSelector","fetchHorizontalQuestion","dispatch","a","axios","get","response","type","HorizontalQuestion","FETCH_HORIZONTAL_QUESTION_SUCCESS","payload","data","question","FETCH_HORIZONTAL_QUESTION_ERROR","setHistoryToStore","SET_HISTORY_ANSWERS","fetchHorizontalAnswer","FETCH_HORIZONTAL_ANSWER_SUCCESS","answer","HorizontalActions","Popup","showPopup","history","checkPopup","popupTitle","word","item","CheckQuestion","clickCheckBtn","setShowPopup","checkContainer","moveBtn","arrowIcon","checkBtn","onClick","checkBlock","moreIcon","Horizontal","state","horizontal","error","useDispatch","bindActionCreators","ActionCreators","useActions","historyWords","setHistoryWords","setCorrectClassName","parsedResult","lastArrayFromHistory","historyTemp","answerTemp","historyString","answerString","i","push","join","toLowerCase","parseLastHistoryAndAnswerToString"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,eAAiB,sCAAsC,cAAgB,uC,mBCA9ID,EAAOC,QAAU,CAAC,YAAc,2CAA2C,cAAgB,6CAA6C,gBAAkB,+CAA+C,UAAY,yCAAyC,SAAW,0C,mBCAzQD,EAAOC,QAAU,CAAC,SAAW,8B,mBCA7BD,EAAOC,QAAU,CAAC,eAAiB,sCAAsC,QAAU,+BAA+B,UAAY,iCAAiC,SAAW,gCAAgC,SAAW,gCAAgC,WAAa,oC,mBCAlQD,EAAOC,QAAU,CAAC,WAAa,0BAA0B,UAAY,yBAAyB,WAAa,0BAA0B,cAAgB,+B,kQCetIC,EAT4B,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MACjD,OACI,sBAAKC,UAAWC,IAAQC,cAAxB,UACI,qBAAKF,UAAWC,IAAQE,eAAxB,SAAyCL,IACzC,qBAAKE,UAAWC,IAAQG,cAAxB,SAAwCL,Q,iDCWrCM,EAfwB,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,iBACrC,OACI,qCAE6B,YAArBA,GACA,mBAAGN,UAAWC,IAAQM,SAAW,kBAAjC,sBAGqB,cAArBD,GACA,mBAAGN,UAAWC,IAAQM,SAAW,kBAAjC,+BCgEDC,EAlEoC,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,MAAOH,EAAoC,EAApCA,iBAAkBI,EAAkB,EAAlBA,aAC1E,EAAsDC,mBAAiB,IAAvE,mBAAOC,EAAP,KAA4BC,EAA5B,KAIAC,qBAAU,WACHL,GACCI,EAAuBJ,KAE5B,IAoBH,OACI,sBAAKT,UAA+B,WAApBM,EAAgCL,IAAQc,YAAc,IAAMd,IAAQe,cAAoC,aAApBV,EAAkCL,IAAQc,YAAe,IAAMd,IAAQgB,gBAAkBhB,IAAQc,YAArM,UACI,cAAC,EAAD,CAAWT,iBAAkBA,IAGzBM,EAAoBM,OAAS,GAC7B,cAAC,IAAD,CAAiBC,UArBX,SAACC,GACf,GAAKA,EAAOC,YAAZ,CAEA,IAAMC,EAAQC,MAAMC,KAAKZ,GACzB,EAAwBU,EAAMG,OAAOL,EAAOM,OAAOC,MAAO,GAAnDC,EAAP,oBACAN,EAAMG,OAAOL,EAAOC,YAAYM,MAAO,EAAGC,GAE1Cf,EAAuBS,GACvBZ,EAAaY,KAaL,SACI,cAAC,IAAD,CAAWO,YAAY,aAAaC,UAAU,aAA9C,SACK,SAACC,GAAD,OACG,8CACI/B,UAAWC,IAAQ+B,WACfD,EAASE,gBAFjB,IAGIC,IAAKH,EAASI,SAHlB,UAMQvB,EAAoBwB,KAAI,WAAcT,GAAW,IAAvBU,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAC1B,OACI,cAAC,IAAD,CAAoBC,YAAaD,EAAOX,MAAOA,EAA/C,SACK,SAACI,GAAD,OACG,2DAASA,EAASS,gBAAoBT,EAASU,iBAA/C,IACKP,IAAKH,EAASI,SAAUnC,UAAWC,IAAQyC,SADhD,SAEI,+BAAOJ,SAJHD,MAU3BN,EAASY,yB,QCnE7BC,EAAoDC,I,0DCGpDC,EAA0B,WACnC,8CAAO,WAAOC,GAAP,eAAAC,EAAA,+EAEwBC,IAAMC,IAAN,wBAFxB,OAEOC,EAFP,OAGCJ,EAAS,CAACK,KAAMC,IAAmBC,kCAAmCC,QAASJ,EAASK,KAAKC,WAH9F,gDAKCV,EAAS,CAACK,KAAMC,IAAmBK,gCAAiCH,QAAS,2FAL9E,yDAAP,uDAWSI,EAAoB,SAACvC,GAC9B,8CAAO,WAAO2B,GAAP,SAAAC,EAAA,sDACHD,EAAS,CAACK,KAAMC,IAAmBO,oBAAqBL,QAASnC,IAD9D,2CAAP,uDAMSyC,EAAwB,WACjC,8CAAO,WAAOd,GAAP,eAAAC,EAAA,+EAEwBC,IAAMC,IAAN,wBAFxB,OAEOC,EAFP,OAGCJ,EAAS,CAACK,KAAMC,IAAmBS,gCAAiCP,QAASJ,EAASK,KAAKO,SAH5F,gDAKChB,EAAS,CAACK,KAAMC,IAAmBK,gCAAiCH,QAAS,mBAL9E,yDAAP,uDCxBW,iBACRS,G,kCCsEQC,EA/DoB,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,UAAWH,EAAqB,EAArBA,OAAQI,EAAa,EAAbA,QAEpD,OACI,sBAAKnE,UAAYkE,EAAiCjE,IAAQmE,WAAa,IAAMnE,IAAQiE,UAAxDjE,IAAQmE,WAArC,UAEQL,GAAUA,EAAO7C,OAAS,GAC1B,qCACI,qBAAKlB,UAAWC,IAAQoE,WAAxB,yGACA,oBAAIrE,UAAWC,IAAQe,cAAvB,SACI,6BACI,8BAEQ+C,EAAO3B,KAAI,SAAAkC,GACP,OACI,iCAAqBA,EAAKhC,MAA1B,MAAWgC,EAAKjC,gBAY5C8B,EAAQjD,OAAS,GACjB,qCACI,qBAAKlB,UAAWC,IAAQoE,WAAxB,mGACA,oBAAIrE,UAAWC,IAAQe,cAAvB,SAGQmD,EAAQ/B,KAAI,SAACmC,EAAM5C,GACf,OACI,6BAEQ4C,GACA,8BAEQA,EAAKnC,KAAI,SAAAkC,GACL,OACI,iCAAqBA,EAAKhC,MAA1B,MAAWgC,EAAKjC,UAP/BV,WAsBV,KAAb,OAANoC,QAAM,IAANA,OAAA,EAAAA,EAAQ7C,SAAmC,IAAnBiD,EAAQjD,QAChC,qBAAKlB,UAAWC,IAAQoE,WAAxB,gFC1BDG,EA7B4B,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,cAAeV,EAAqB,EAArBA,OAAQI,EAAa,EAAbA,QAChE,EAAkCxD,oBAAkB,GAApD,mBAAOuD,EAAP,KAAkBQ,EAAlB,KAMA,OACI,sBAAK1E,UAAWC,IAAQ0E,eAAxB,UACI,sBAAK3E,UAAWC,IAAQ2E,QAAxB,UAAiC,mBAAG5E,UAAWC,IAAQ4E,UAAY,uBAAlC,iCAAjC,qCACA,gCACI,qBACI7E,UAAWC,IAAQ6E,SAAW,gBAC9BC,QAAS,kBAAMN,KAFnB,mBAIA,sBAAKzE,UAAWC,IAAQ+E,WAAxB,UACI,mBACIhF,UAAWC,IAAQgF,SAAW,kBAC9BF,QAfA,WAChBL,GAAcR,IAYF,uBAIA,cAAC,EAAD,CAAOA,UAAWA,EAAWH,OAAQA,EAAQI,QAASA,UAI9D,sBAAKnE,UAAWC,IAAQ2E,QAAxB,2CAAsC,mBAAG5E,UAAWC,IAAQ4E,UAAY,wBAAlC,yCC2EnCK,UAjGI,WACf,MAAuCtC,GAAiB,SAAAuC,GAAK,OAAIA,EAAMC,WAAW3B,YAA3EhD,EAAP,EAAOA,MAAON,EAAd,EAAcA,eAAgBJ,EAA9B,EAA8BA,MAC9B,EAAiC6C,GAAiB,SAAAuC,GAAK,OAAIA,EAAMC,cAA1DjB,EAAP,EAAOA,QAASJ,EAAhB,EAAgBA,OAAQsB,EAAxB,EAAwBA,MACxB,ECbsB,WACtB,IAAMtC,EAAWuC,cACjB,OAAOC,YAAmBC,EAAgBzC,GDWkC0C,GAArE3C,EAAP,EAAOA,wBAAyBa,EAAhC,EAAgCA,kBAAmBE,EAAnD,EAAmDA,sBACnD,EAAwClD,mBAAiB,IAAzD,mBAAO+E,EAAP,KAAqBC,EAArB,KACA,EAAgDhF,mBAAiB,IAAjE,mBAAOL,EAAP,KAAyBsF,EAAzB,KAGA9E,qBAAU,WACNgC,MACD,IA6BHhC,qBAAU,WACN,IAAM+E,EA1BgC,SAACC,EAA8B/B,GACrE,IAAMgC,EAAc,GACdC,EAAa,GACb5E,EAAS,CACX6E,cAAe,GACfC,aAAc,IAElB,GAAI/B,EAAQjD,OAAS,EAAG,CACpB,IAAK,IAAIiF,EAAI,EAAGA,EAAIL,EAAqB5E,OAAQiF,IAC7CJ,EAAYK,KAAKN,EAAqBK,GAAG7D,OAE7ClB,EAAO6E,cAAgBF,EAAYM,KAAK,KAAKC,cAEjD,GAAIvC,EAAO7C,OAAS,EAAG,CACnB,IAAK,IAAIiF,EAAI,EAAGA,EAAIpC,EAAO7C,OAAQiF,IAC/BH,EAAWI,KAAKrC,EAAOoC,GAAG7D,OAE9BlB,EAAO8E,aAAeF,EAAWK,KAAK,KAAKC,cAG/C,OAAOlF,EAMcmF,CAAkCpC,EAAQA,EAAQjD,OAAS,GAAI6C,GACjD,KAA/B8B,EAAaI,eAAsD,KAA9BJ,EAAaK,eAC9CL,EAAaI,gBAAkBJ,EAAaK,aAC5CN,EAAoB,WAGpBA,EAAoB,gBAI7B,CAAC7B,EAAQI,IAyBZ,OAAIkB,EAAc,8BAAMA,IAIpB,gCAEQ5E,GACA,qCACI,cAAC,EAAD,CAAeX,OAAQK,EAAgBJ,MAAOA,IAC9C,cAAC,EAAD,CACIO,iBAAkBA,EAClBI,aAjBC,SAACU,GAClBuE,EAAgBvE,IAiBAX,MAAOA,OAInB,cAAC,EAAD,CAAegE,cAnCD,WACdiB,EAAaxE,OAAS,EACtByC,EAAkB+B,GACXjF,GACPkD,EAAkBlD,GAED,IAAlBsD,EAAO7C,QACN2C,KA4B6CE,OAAQA,EAAQI,QAASA","file":"static/js/4.d2709c65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionBlock\":\"QuestionTitle_questionBlock__1h2fn\",\"questionNumber\":\"QuestionTitle_questionNumber__JpYjh\",\"questionTitle\":\"QuestionTitle_questionTitle__IE-pD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lightBorder\":\"HorizontalDragAndDrop_lightBorder__1xG8H\",\"correctAnswer\":\"HorizontalDragAndDrop_correctAnswer__BA2rJ\",\"incorrectAnswer\":\"HorizontalDragAndDrop_incorrectAnswer__vNbg9\",\"dragBlock\":\"HorizontalDragAndDrop_dragBlock__1VqUx\",\"dragItem\":\"HorizontalDragAndDrop_dragItem__1zqWV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"doneIcon\":\"CheckMark_doneIcon__gK0A_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkContainer\":\"CheckQuestion_checkContainer__2q7PS\",\"moveBtn\":\"CheckQuestion_moveBtn__sI-ms\",\"arrowIcon\":\"CheckQuestion_arrowIcon__1DgPY\",\"moreIcon\":\"CheckQuestion_moreIcon__1C0yx\",\"checkBtn\":\"CheckQuestion_checkBtn__3ObEO\",\"checkBlock\":\"CheckQuestion_checkBlock__27bfK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkPopup\":\"Popup_checkPopup__AR61f\",\"showPopup\":\"Popup_showPopup__JCkl-\",\"popupTitle\":\"Popup_popupTitle__3zvcF\",\"correctAnswer\":\"Popup_correctAnswer__29dEk\"};","import React from 'react';\r\nimport classes from \"./QuestionTitle.module.css\"\r\n\r\ninterface PropsType {\r\n    number: number | null,\r\n    title: string | null\r\n}\r\nconst QuestionTitle: React.FC<PropsType> = ({number, title}) => {\r\n    return (\r\n        <div className={classes.questionBlock}>\r\n            <div className={classes.questionNumber}>{number}</div>\r\n            <div className={classes.questionTitle}>{title}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionTitle;\r\n","import React from 'react';\r\nimport classes from \"./CheckMark.module.css\";\r\n\r\n\r\ninterface PropsType {\r\n    correctClassName: string\r\n}\r\nconst CheckMark: React.FC<PropsType> = ({correctClassName}) => {\r\n    return (\r\n        <>\r\n            {\r\n                correctClassName === 'correct' &&\r\n                <i className={classes.doneIcon + \" material-icons\"}>done_all</i>\r\n            }\r\n            {\r\n                correctClassName === 'incorrect' &&\r\n                <i className={classes.doneIcon + \" material-icons\"}>error_outline</i>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CheckMark;\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport classes from \"./HorizontalDragAndDrop.module.css\"\r\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\r\nimport {Word} from \"../../types/horizontalQuestion\";\r\nimport CheckMark from \"../../common/CheckMark/CheckMark\";\r\n\r\n\r\ninterface PropsType {\r\n    words: Word[] | null\r\n    correctClassName: string\r\n    updatedArray: (result: Word[]) => void\r\n}\r\n\r\n\r\nconst HorizontalDragAndDrop: React.FC<PropsType> = ({words, correctClassName, updatedArray}) => {\r\n    const [updatedArrayOfWords, setUpdatedArrayOfWords] = useState<Word[]>([]) //Local state for updated array of words\r\n\r\n\r\n    //Set Updated array at local state on first loading\r\n    useEffect(() => {\r\n        if(words){\r\n            setUpdatedArrayOfWords(words)\r\n        }\r\n    }, [])\r\n    \r\n\r\n\r\n    //Move word items\r\n    const onDragEnd = (result: any) => {\r\n        if (!result.destination) return; //If destination isn't droppable container\r\n\r\n        const items = Array.from(updatedArrayOfWords);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem)\r\n\r\n        setUpdatedArrayOfWords(items); //Update local Array\r\n        updatedArray(items) //Send updated array to HOC\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={correctClassName == 'correct' ? classes.lightBorder + ' ' + classes.correctAnswer : correctClassName == \"incorrect\" ? classes.lightBorder  + ' ' + classes.incorrectAnswer : classes.lightBorder }>\r\n            <CheckMark correctClassName={correctClassName} />\r\n\r\n            {\r\n                updatedArrayOfWords.length > 0 &&\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Droppable droppableId=\"characters\" direction=\"horizontal\">\r\n                        {(provided) => (\r\n                            <div\r\n                                className={classes.dragBlock}\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                            >\r\n                                {\r\n                                    updatedArrayOfWords.map(({id, value}, index) => {\r\n                                        return (\r\n                                            <Draggable key={id} draggableId={value} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div {...provided.draggableProps} {...provided.dragHandleProps}\r\n                                                         ref={provided.innerRef} className={classes.dragItem}>\r\n                                                        <span>{value}</span></div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HorizontalDragAndDrop;\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/reducers\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import {Dispatch} from \"redux\";\r\nimport {HorizontalActions, HorizontalQuestion, Word} from \"../../types/horizontalQuestion\";\r\nimport axios from \"axios\";\r\n\r\n\r\n//Get question from server and save it to store\r\nexport const fetchHorizontalQuestion = () => {\r\n    return async (dispatch: Dispatch<HorizontalActions>) => {\r\n        try {\r\n            const response = await axios.get(`data/horizontal.json`)\r\n            dispatch({type: HorizontalQuestion.FETCH_HORIZONTAL_QUESTION_SUCCESS, payload: response.data.question})\r\n        } catch (error) {\r\n            dispatch({type: HorizontalQuestion.FETCH_HORIZONTAL_QUESTION_ERROR, payload: 'Ошибка загрузки!'})\r\n        }\r\n    }\r\n}\r\n\r\n//Save answers history to store\r\nexport const setHistoryToStore = (result: Word[]) => {\r\n    return async (dispatch: Dispatch<HorizontalActions>) => {\r\n        dispatch({type: HorizontalQuestion.SET_HISTORY_ANSWERS, payload: result})\r\n    }\r\n}\r\n\r\n//Get correct answer from server and save it to store\r\nexport const fetchHorizontalAnswer = () => {\r\n    return async (dispatch: Dispatch<HorizontalActions>) => {\r\n        try {\r\n            const response = await axios.get(`data/horizontal.json`)\r\n            dispatch({type: HorizontalQuestion.FETCH_HORIZONTAL_ANSWER_SUCCESS, payload: response.data.answer})\r\n        } catch (error) {\r\n            dispatch({type: HorizontalQuestion.FETCH_HORIZONTAL_QUESTION_ERROR, payload: 'Loading error!'})\r\n        }\r\n    }\r\n}\r\n","import * as HorizontalActions from './horizontal'\r\n\r\nexport default {\r\n    ...HorizontalActions\r\n}\r\n","import React from 'react';\r\nimport classes from \"./Popup.module.css\";\r\nimport {Word} from \"../../types/horizontalQuestion\";\r\n\r\ninterface PropsType {\r\n    showPopup: boolean\r\n    answer: Word[] | null,\r\n    history: Array<Word[] | null>\r\n}\r\n\r\nconst Popup: React.FC<PropsType> = ({showPopup, answer, history}) => {\r\n\r\n    return (\r\n        <div className={!showPopup ? classes.checkPopup : classes.checkPopup + ' ' + classes.showPopup}>\r\n            {\r\n                answer && answer.length > 0 &&\r\n                <>\r\n                    <div className={classes.popupTitle}>Правильный ответ</div>\r\n                    <ul className={classes.correctAnswer}>\r\n                        <li>\r\n                            <div>\r\n                                {\r\n                                    answer.map(word => {\r\n                                        return (\r\n                                            <span key={word.id}>{word.value} </span>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </li>\r\n\r\n\r\n                    </ul>\r\n                </>\r\n            }\r\n            {\r\n                history.length > 0 &&\r\n                <>\r\n                    <div className={classes.popupTitle}>История ответов</div>\r\n                    <ul className={classes.correctAnswer}>\r\n\r\n                        {\r\n                            history.map((item, index) => {\r\n                                return (\r\n                                    <li key={index}>\r\n                                        {\r\n                                            item &&\r\n                                            <div>\r\n                                                {\r\n                                                    item.map(word => {\r\n                                                        return (\r\n                                                            <span key={word.id}>{word.value} </span>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </ul>\r\n                </>\r\n            }\r\n            {\r\n                answer?.length === 0 && history.length === 0 &&\r\n                <div className={classes.popupTitle}>Нет ответов!</div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Popup;\r\n","import React, {useState} from 'react';\r\nimport classes from './CheckQuestion.module.css'\r\nimport Popup from \"../Popup/Popup\";\r\nimport {Word} from \"../../types/horizontalQuestion\";\r\n\r\n\r\ninterface PropsType {\r\n    clickCheckBtn: () => void\r\n    answer: Word[] | null\r\n    history: Array<Word[] | null>\r\n}\r\n\r\nconst CheckQuestion: React.FC<PropsType> = ({clickCheckBtn, answer, history}) => {\r\n    const [showPopup, setShowPopup] = useState<boolean>(false)\r\n\r\n    const togglePopup = () => {\r\n        setShowPopup(!showPopup)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.checkContainer}>\r\n            <div className={classes.moveBtn}><i className={classes.arrowIcon + \" material-icons left\"}>keyboard_arrow_left</i> Назад</div>\r\n            <div>\r\n                <div\r\n                    className={classes.checkBtn + \" waves-effect\"}\r\n                    onClick={() => clickCheckBtn()}\r\n                >Check</div>\r\n                <div className={classes.checkBlock}>\r\n                    <i\r\n                        className={classes.moreIcon + \" material-icons\"}\r\n                        onClick={togglePopup}\r\n                    >more_vert</i>\r\n                    <Popup showPopup={showPopup} answer={answer} history={history} />\r\n                </div>\r\n\r\n            </div>\r\n            <div className={classes.moveBtn}>Далее<i className={classes.arrowIcon + \" material-icons right\"}>keyboard_arrow_right</i></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckQuestion;\r\n","import React, {useEffect, useState} from 'react';\r\nimport QuestionTitle from \"../../components/QuestionTitle/QuestionTitle\";\r\nimport HorizontalDragAndDrop from \"../../components/HorizontalDragAndDrop/HorizontalDragAndDrop\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\nimport CheckQuestion from \"../../components/CheckQuestion/CheckQuestion\";\r\nimport {Word} from \"../../types/horizontalQuestion\";\r\n\r\ninterface ParseHistoryAnswer {\r\n    historyString: string\r\n    answerString: string\r\n}\r\n\r\n\r\nconst Horizontal = () => {\r\n    const {words, questionNumber, title} = useTypedSelector(state => state.horizontal.question) //Get words, questionNumber, title from Store\r\n    const {history, answer, error} = useTypedSelector(state => state.horizontal) //Get history, answer, error from Store\r\n    const {fetchHorizontalQuestion, setHistoryToStore, fetchHorizontalAnswer} = useActions() //Action creators\r\n    const [historyWords, setHistoryWords] = useState<Word[]>([]) //Local state for saving history after each question update\r\n    const [correctClassName, setCorrectClassName] = useState<string>('') //Local state for saving\r\n\r\n    //Loading Question\r\n    useEffect(() => {\r\n        fetchHorizontalQuestion()\r\n    }, [])\r\n\r\n\r\n    // Parse lastArrayFromHistory and answer to string\r\n    const parseLastHistoryAndAnswerToString = (lastArrayFromHistory: Word[], answer: Word[]): ParseHistoryAnswer => {\r\n        const historyTemp = []\r\n        const answerTemp = []\r\n        const result = {\r\n            historyString: '',\r\n            answerString: ''\r\n        }\r\n        if (history.length > 0) {\r\n            for (let i = 0; i < lastArrayFromHistory.length; i++) {\r\n                historyTemp.push(lastArrayFromHistory[i].value)\r\n            }\r\n            result.historyString = historyTemp.join(' ').toLowerCase()\r\n        }\r\n        if (answer.length > 0) {\r\n            for (let i = 0; i < answer.length; i++) {\r\n                answerTemp.push(answer[i].value)\r\n            }\r\n            result.answerString = answerTemp.join(' ').toLowerCase()\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n\r\n    //When adding a new entry to history\r\n    useEffect(() => {\r\n        const parsedResult = parseLastHistoryAndAnswerToString(history[history.length - 1], answer)\r\n        if (parsedResult.historyString !== '' && parsedResult.answerString !== '') {\r\n            if (parsedResult.historyString === parsedResult.answerString) {\r\n                setCorrectClassName('correct')\r\n                //TODO Implement saving correct answers to STORE\r\n            } else {\r\n                setCorrectClassName('incorrect')\r\n                //TODO Implement saving incorrect answers to STORE\r\n            }\r\n        }\r\n    }, [answer, history])\r\n\r\n\r\n    //After each click \"CHECK\",\r\n    // 1) save result at History at store\r\n    // 2) get correct answer\r\n    const clickCheckBtn = () => {\r\n        if (historyWords.length > 0) {\r\n            setHistoryToStore(historyWords)\r\n        } else if (words) {\r\n            setHistoryToStore(words)\r\n        };\r\n        if(answer.length === 0){\r\n            fetchHorizontalAnswer()\r\n        }\r\n    }\r\n\r\n\r\n    //After each update of the word array, save it to the local state\r\n    const updatedArray = (result: Word[]) => {\r\n        setHistoryWords(result)\r\n    }\r\n\r\n\r\n    // Processing errors and loading\r\n    if (error) return <div>{error}</div>\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                words &&\r\n                <>\r\n                    <QuestionTitle number={questionNumber} title={title} />\r\n                    <HorizontalDragAndDrop\r\n                        correctClassName={correctClassName}\r\n                        updatedArray={updatedArray}\r\n                        words={words}\r\n                    />\r\n                </>\r\n            }\r\n            <CheckQuestion clickCheckBtn={clickCheckBtn} answer={answer} history={history}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Horizontal;\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport ActionCreators from '../store/action-creators'\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(ActionCreators, dispatch)\r\n}\r\n"],"sourceRoot":""}